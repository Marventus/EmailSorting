/* Note: If you are reading this in SublimeText or a code editor, set the sytax highlighting to Javascript, to get a more readable document. */

====================
PREAMBLE
====================

/*
This document is part of a larger body of work being done to improve the state of fuzzy logic algorithms that have to do with sorting and prioritizing email. This is a pseudocode analysis that will be later published in several different codebases to be included into email programs and any other natural language processing software that requires a prioritising and sorting engine.

This pseudocode analysis of sorting algoritms is distrubuted under the GPL version 3. Please see the license conditions here:
http://www.opensource.org/licenses/gpl-3.0.html

This work is orginally conducted by Kosala Ubayasekara (kosalau@gmail.com) (kosala@cozala.com) under the reserch and development programme of Cozala LTD, registered in the United Kingdom. See our website www.cozala.com for details. Contributions and thinking welcome from third parties according to the guidelines of the license above.
*/

====================
PROBLEM DEFINITION
====================

/*
The sheer volume of email passed into corporate email servers is staggering. Current efforts by email providers and client developers have centered around the concept of prioritisation and intelligent sorting. This is only half the solution but even that half requires considerable improvement. The current efforts are largely based around behaviour pattern matching over time. This analysis focuses on natural language based patterns coupled with traditional user behavious in corporate situations that regularly occur, as an addition to pattern analysis approach.
*/

====================
NATURAL LANGUAGE PROCESSING v0.1
====================

/* This matching criteria is based around keywords that often occur in a corporate environment */

function KeywordMatch(Sender as Person, EmailSubject as String, EmailBody as String) {
	Array keywords[] = "project,meeting,call,meet,room"
	Array keywordsMisspelled[] = "projet,poject,meeeting,meetin,rom"

	For Each item in keywords
		If item exists in EmailSubject or EmailBody (
			Select case Sender.Importance
				case "Important"
					Do Nothing
				case "PerhapsImportant"
					Define Sender as Important
				case "UnImportant"
					Define Sender as PerhapsImportant
			end Select
		)
	Loop

	For Each item in keywordsMisspelled
		If item exists in EmailSubject or EmailBody (
			Select case Sender.Importance
				case "Important"
					Do Nothing
				case "PerhapsImportant"
					Define Sender as Important
				case "UnImportant"
					Define Sender as PerhapsImportant
			end Select
		)
	Loop

	Run 
}

====================
DEPENDANT BEHAVIOR TRACKING v0.1
====================

/* This matching criteria is based around historic behavior for the use in relation to other users */

/* Helper function to caluclate dependant behaviour */

function getAllMeetingsFromDate(Person as Person, dateToCheck as date, amountOfDays as integer){
	int amountOfMeetings;
	array allMeetingsFromDateWithPerson;

	if IMAPconnection available {
		for each meeting in IMAP.meetings with date < today - 30 days do
		if IMAP.meeting with Person {
			allMeetingsFromDateWithPerson[i] = IMAP.meeting;
		}

		i++;
		Loop
	} else {
		array allEmailsWithInvite = 'populate this with all emails with the word Invite or Invitation in the subject or body'

		for each meeting in allEmailsWithInvite with date < today - 30 days do {
			allMeetingsFromDateWithPerson[i] = meeting;
			i++;
		}

	}
	
	return amountOfMeetings;
}

/* Helper function to check if the user has recurring meetings with Person in the last 30 days*/

function getAllRecurringMeetings(sender as Person, today as Date, amountOfDays as integer){
	if IMAPconnection available {
		for each meeting in IMAP.meetings with date < today - 30 days do
		if IMAP.meeting with Person {
			is IMAP.meeting.recurring = TRUE {
				return TRUE;
				EXIT;
			}
		}
		return FALSE;
		EXIT;
	}
	else {
		array allEmailsWithInvite = 'populate this with all emails with the word Invite or Invitation in the subject or body'

		for each meeting in allEmailsWithInvite with date < today - 30 days do {
			int p = i+1;
			for each p in allEmailsWithInvite do
				if allEmailsWithInvite[i] = allEmailsWithInvite[p] {
					return TRUE;
					EXIT;
				}
				p++;
			Loop
			i++;
		}
		return FALSE;
		EXIT;
	}
}

/* Lets start with check to see if a user has had any previous meetings booked with the sender in the last 30 days */

function checkPastMeetings(sender as Person, dateToCheck as Date) {

	int amountOfMeetings = getAllMeetingsFromDate(Person,dateToCheck,30);

	/* Adjust the importance accordingly */
	if amountOfMeetings > 4 then (
		Select case Sender.Importance
			case "Important"
				Do Nothing
			case "PerhapsImportant"
				Define Sender as Important
			case "UnImportant"
				Define Sender as PerhapsImportant
		end Select
	)
}

/* Now lets get more advanced and look at recurring behaviours */

function checkRecurringMeetingBehavior(sender as Person) {

	BOOL doesHaveRecurringMeetings = getAllRecurringMeetings(Person,todaysDate,30)

	if doesHaveRecurringMeetings = YES (
		Select case Sender.Importance
			case "Important"
				Do Nothing
			case "PerhapsImportant"
				Define Sender as Important
			case "UnImportant"
				Define Sender as PerhapsImportant
		end Select
	)
}